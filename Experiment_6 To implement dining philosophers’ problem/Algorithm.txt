Algorithm:

1. The dining philosophers problem states that there are 5 philosophers sharing a circular
table and they eat and think alternatively. There is a bowl of rice for each of the
philosophers and 5 chopsticks. A philosopher needs both their right and left chopstick to
eat. A hungry philosopher may only eat if there are both chopsticks available. Otherwise, a
philosopher puts down their chopstick and begins thinking again.
2. A solution of the Dining Philosophers Problem is to use a semaphore to represent a
chopstick. A chopstick can be picked up by executing a wait operation on the semaphore
and released by executing a signal semaphore.
3. Initially the chopsticks are initialized to 1 as the chopsticks are on the table and not picked
up by a philosopher
4. First wait operation is performed on chopstick[i] and chopstick[(i+1)%5]. This means that
the philosopher i has picked up the chopsticks on his sides. Then the eating function is
performed.
5. After that, signal operation is performed on chopstick[i] and chopstick[(i+1)%5]. This
means that the philosopher I has eaten and put down the chopsticks on his sides. Then the
philosopher goes back to thinking.
